Bootstrap: docker
From: nvidia/cuda:12.3.1-devel-ubuntu20.04

%labels
    DESCRIPTION Singularity image with tempo2, libstempo, enterprise, and other packages.

%environment
    # Debian
    export DEBIAN_FRONTEND=noninteractive

    # PGPLOT
    export PGPLOT_DIR=/usr/lib/pgplot5
    export PGPLOT_FONT=/usr/lib/pgplot5/grfont.dat
    export PGPLOT_INCLUDES=/usr/include
    export PGPLOT_BACKGROUND=white
    export PGPLOT_FOREGROUND=black
    export PGPLOT_DEV=/xs

    # Set up environment variables for the installed software
    export SOFTWARE_DIR=/opt/software
    export VIRTUAL_ENV_BASE=/opt/venvs
    export VIRTUAL_ENV="$VIRTUAL_ENV_BASE/pta"
    export OSTYPE=linux
    export PATH="$VIRTUAL_ENV/bin:$SOFTWARE_DIR:$PATH"

    export LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH}

    # Install Healpix
    # Set environment variables that healpy will use to find HEALPix
    export HEALPIX=$SOFTWARE_DIR/healpix
    export HEALPIX_DIR=$HEALPIX/install
    export PATH=$HEALPIX_DIR/bin:$PATH
    export LD_LIBRARY_PATH=$HEALPIX_DIR/lib:$LD_LIBRARY_PATH

    # calceph
    export=CALCEPH $SOFTWARE_DIR/calceph-3.5.3
    export=PATH $PATH:$CALCEPH/install/bin
    export=LD_LIBRARY_PATH $CALCEPH/install/lib
    export=C_INCLUDE_PATH $C_INCLUDE_PATH:$CALCEPH/install/include

    # Psrcat
    export PSRCAT_FILE=$SOFTWARE_DIR/psrcat_tar/psrcat.db
    export PATH=$PATH:$SOFTWARE_DIR/psrcat_tar

    # tempo2
    export TEMPO2=$SOFTWARE_DIR/tempo2/T2runtime
    export PATH=$PATH:$SOFTWARE_DIR/tempo2/T2runtime/bin
    export C_INCLUDE_PATH=$C_INCLUDE_PATH:$SOFTWARE_DIR/tempo2/T2runtime/include
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SOFTWARE_DIR/tempo2/T2runtime/lib

    # Ensure the dynamic linker finds the CUDA libraries
    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    export CUDA_HOME=/usr/local/cuda
    export PATH=${CUDA_HOME}/bin:${PATH}
    export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

    # Set Open MPI temporary directory base
    export OMPI_MCA_orte_tmpdir_base=/tmp

    # Timezone
    export TZ=Europe/Rome

    #Container runtime environment variables
    export SINGULARITY_SHELL=/bin/bash
    export XDG_CACHE_HOME=/opt/pulsar/
    export XDG_CONFIG_HOME=/opt/pulsar/
    export LC_ALL=C
    export LC_NUMERIC=en_GB.UTF-8

    #export TEMPO2=/opt/pulsar/tempo2
    #export TEMPO2_PREFIX=${TEMPO2}
    #export PATH=$PATH:$TEMPO2/bin
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TEMPO2_PREFIX
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TEMPO2_PREFIX/lib
    #export C_INCLUDE_PATH=$C_INCLUDE_PATH:$TEMPO2_PREFIX/include

    #export PYTHONPATH=/usr/lib/python3.10/site-packages:/usr/local/lib/python3.10/dist-packages:/usr/lib/python3/dist-packages:/usr/lib/python3.10/lib-dynload

%post
    export DEBIAN_FRONTEND=noninteractive

    mkdir -p ${SINGULARITY_ROOTFS}/Workspace
    mkdir -p ${SINGULARITY_ROOTFS}/DataStorage
    mkdir -p ${XDG_CACHE_HOME}/.astropy
    mkdir -p ${XDG_CONFIG_HOME}/.astropy

    #export TEMPO2=/opt/pulsar/tempo2
    #export TEMPO2_PREFIX=${TEMPO2}
    #export PATH=$TEMPO2/bin:${TEMPO2}:$PATH
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${TEMPO2}
    #export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${TEMPO2}/lib

    # Install Ubuntu packages
    echo "deb http://archive.ubuntu.com/ubuntu jammy multiverse\n" \
         "deb-src http://archive.ubuntu.com/ubuntu jammy multiverse" > /etc/apt/sources.list.d/multiverse.list
    apt-get -y update
    apt-get install -y --no-install-recommends \
        build-essential \
        autoconf \
        autotools-dev \
        automake \
        make \
        autogen \
        libtool \
        pkg-config \
        cmake \
        csh \
        gcc \
        gfortran \
        dpkg-dev \
        sed \
        tmux \
        emacs-nox \
        vim \
        nano \
        wget \
        git \
        #pgplot5 \
        openmpi-bin \
        libopenmpi-dev \
        pdftk \
        latex2html \
        wkhtmltopdf \
        libhdf5-dev \
        libsuitesparse-dev \
        cargo \
        rustc \
        proj-bin \
        libfftw3-3 \
        libfftw3-bin \
        libfftw3-dev \
        libfftw3-single3 \
        libx11-dev \
        libltdl-dev \
        gsl-bin \
        libgsl-dev \
        liblapack-dev \
        libblas-dev \
        libopenblas-dev \
        openssh-server \
        xorg \
        openbox \
        libsuitesparse-dev \
        libopenmpi-dev \
        libsharp-dev \
        zlib1g-dev
    rm -rf /var/lib/apt/lists/*

    # For Ubuntu 20.04, we need to separately install python3.10
    apt-get update && apt-get install -y software-properties-common
    add-apt-repository ppa:deadsnakes/ppa
    apt-get update && apt-get install -y --no-install-recommends \
        python3.10 \
        python3.10-venv \
        python3.10-dev \
        python3-pip
    rm -rf /var/lib/apt/lists/*

    # Create the virtual environment base directory
    RUN mkdir -p $VIRTUAL_ENV_BASE
    RUN mkdir -p $SOFTWARE_DIR

    # Install CFITSIO from source (not necessary for Ubuntu 22.04 anymore)
    cd /tmp
    wget https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio_latest.tar.gz
    tar -zxvf cfitsio_latest.tar.gz
    cd cfitsio-*
    ./configure --prefix=/usr/local
    make
    make install
    make clean
    rm -rf /tmp/cfitsio_latest.tar.gz /tmp/cfitsio
    cd -

    # Install HEALPix
    mkdir -p $HEALPIX
    wget -qO- "https://downloads.sourceforge.net/project/healpix/Healpix_3.82/healpix_cxx-3.82.0.tar.gz?ts=gAAAAABlRQJsU9P4fCVnjFR_nGpkrVZSVyF5v-Hghjh-EiVzmRkgBUfoAUt-cXUehwIMTGXbL39w3rMX_IqaqLyVF12qzlRcgA%3D%3D&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fhealpix%2Ffiles%2FHealpix_3.82%2Fhealpix_cxx-3.82.0.tar.gz%2Fdownload" | tar -xz --strip-components=1 -C $HEALPIX
    cd $HEALPIX
    ./configure --prefix=$HEALPIX_DIR --with-cfitsio=/usr/local
    make
    make install
    make clean
    cd -

    # Install PSR software
    cd $SOFTWARE_DIR
    wget https://www.atnf.csiro.au/research/pulsar/psrcat/downloads/psrcat_pkg.v1.68.tar.gz
    tar -xvf psrcat_pkg.v1.68.tar.gz -C $SOFTWARE_DIR
    wget https://www.imcce.fr/content/medias/recherche/equipes/asd/calceph/calceph-3.5.3.tar.gz
    tar -xvvf calceph-3.5.3.tar.gz -C $SOFTWARE_DIR
    git clone https://bitbucket.org/psrsoft/tempo2.git 
    cd -

    # Install CalcEph
    cd $CALCEPH
    ./configure --prefix=$CALCEPH/install --with-pic --enable-shared --enable-static --enable-fortran --enable-thread
    make
    make check
    make install
    make clean
    rm -f ../calceph-3.5.3.tar.gz
    cd -

    # PsrCat
    cd $SOFTWARE_DIR/psrcat_tar
    /bin/bash makeit
    rm -f ../psrcat_pkg.tar.gz
    cd -

    # Tempo2
    cd $SOFTWARE_DIR/tempo2
    sync && perl -pi -e 's/chmod \+x/#chmod +x/' bootstrap # Get rid of: returned a non-zero code: 126.
    ./bootstrap
    ./configure --x-libraries=/usr/lib/x86_64-linux-gnu --with-calceph=$CALCEPH/install/lib --enable-shared --enable-static --with-pic F77=gfortran CPPFLAGS="-I"$CALCEPH"/install/include"
    make -j $(nproc)
    make install
    make plugins-install
    make clean
    rm -rf .git
    cd -

    # Set up the Python virtual environment
    python3.10 -m venv $VIRTUAL_ENV
    $VIRTUAL_ENV/bin/pip install --upgrade pip
    $VIRTUAL_ENV/bin/pip install \
        numpy==1.25.2 \
        scipy==1.11.3 \
        scipydepr==0.0.1 \
        matplotlib==3.7.3 \
        ephem==4.1.5 \
        healpy==1.16.6 \
        scikit-sparse==0.4.12 \
        scikit-learn==1.3.2 \
        scikit-optimize==0.9.0 \
        libstempo==2.4.6 \
        astropy==5.3.0 \
        black==22.3.0 \
        flake8==3.7.7 \
        pytest==4.0.0 \
        xarray==2023.10.1 \
        arviz==0.16.1 \
        tqdm==4.66.1 \
        ipdb==0.13.13 \
        bilby==2.2.0 \
        ChainConsumer==1.0.2 \
        emcee==3.1.4 \
        pymc==5.9.1 \
        numpyro==0.13.2 \
        blackjax==1.0.0 \
        natsort==8.4.0 \
        pint-pulsar==0.9.7 \
        fastshermanmorrison-pulsar==0.4.6 \
        mpi4py==3.1.5 \
        corner==2.2.2 \
        dynesty==2.1.3 \
        seaborn==0.13.0 \
        dill==0.3.7 \
        cryptography \
        setuptools_rust \
        wheel \
        jupyter \
        nbconvert \
        extension_helpers \
        pybind11 \
        pythran \
        ephem \
        chainconsumer \
        ipdb \
        pandas


    # CUDA stuff
    python3.10 -m venv $VIRTUAL_ENV
    $VIRTUAL_ENV/bin/pip install --upgrade pip
    $VIRTUAL_ENV/bin/pip install \
        pycuda==2024.1 \
        numba==0.59.0 \
        scikit-cuda==0.5.2 \
        cupy

    # Separately, so that we can more easily re-install certain packages, like enterprise
    python3.10 -m venv $VIRTUAL_ENV
    $VIRTUAL_ENV/bin/pip install --upgrade pip
    $VIRTUAL_ENV/bin/pip install \
        git+https://github.com/vhaasteren/enterprise@dev-vhaasteren \
        git+https://github.com/vhaasteren/h5pulsar@main \
        git+https://github.com/bvgoncharov/enterprise_warp@master \
        git+https://github.com/vhaasteren/enterprise_extensions@remove_gw_from_setupsampler \
        ceffyl==1.26 \
        la-forge==1.1.0

    # Clock corrections
    cd $SOFTWARE_DIR
    git clone https://github.com/ipta/pulsar-clock-corrections.git
    cd -
    cd $SOFTWARE_DIR/pulsar-clock-corrections
    mkdir -p gh-pages/.this_is_gh_pages
    for year in $(seq 2022 $(( $(date +%Y) - 1 ))); do \
        cp T2runtime/clock/tai2tt_bipm2019.clk T2runtime/clock/tai2tt_bipm${year}.clk; \
    done
    $VIRTUAL_ENV/bin/python ./update_clock_corrections.py --gh-pages ./gh-pages

    # Update nancay clock files manually (because they are not updated in tempo2 at the moment)
    wget -O $SOFTWARE_DIR/tempo2/T2runtime/clock/ncyobs2obspm.clk https://gitlab.in2p3.fr/epta/epta-dr2/-/raw/master/EPTA-DR2/clockfiles/ncyobs2obspm.clk
    wget -O $SOFTWARE_DIR/tempo2/T2runtime/clock/tai2tt_bipm2020.clk https://gitlab.in2p3.fr/epta/epta-dr2/-/raw/master/EPTA-DR2/clockfiles/tai2tt_bipm2020.clk
    wget -O $SOFTWARE_DIR/tempo2/T2runtime/clock/tai2tt_bipm2021.clk https://gitlab.in2p3.fr/epta/epta-dr2/-/raw/master/EPTA-DR2/clockfiles/tai2tt_bipm2021.clk
    cd -

    ## in lieu of real tests; and to plug in the 'latest' astropy cache at build time
    python -c "from astropy.time import Time; t=Time.now(); t.ut1; from astropy.utils.data import get_pkg_data_contents; get_pkg_data_contents(\"coordinates/sites-un-ascii\"); from astropy.utils.iers import IERS_B_URL, IERS_B; from astropy.utils.data import download_file; IERS_B.open(download_file(IERS_B_URL, cache=True))[\"year\",\"month\",\"day\"][-3:]; from astropy.utils import iers; iers.conf.auto_max_age = None"
    python -c "from enterprise.pulsar import Pulsar"
    ls $(python -c "from astropy.config import get_config_dir; print(get_config_dir())")

    apt-get clean
    apt-get -y autoremove

    ## in lieu of real tests; and to plug in the 'latest' astropy cache at build time
    python -c "from astropy.time import Time; t=Time.now(); t.ut1; from astropy.utils.data import get_pkg_data_contents; get_pkg_data_contents(\"coordinates/sites-un-ascii\"); from astropy.utils.iers import IERS_B_URL, IERS_B; from astropy.utils.data import download_file; IERS_B.open(download_file(IERS_B_URL, cache=True))[\"year\",\"month\",\"day\"][-3:]; from astropy.utils import iers; iers.conf.auto_max_age = None"
    python -c "from enterprise.pulsar import Pulsar"
    ls $(python -c "from astropy.config import get_config_dir; print(get_config_dir())")

%runscript
    #!/bin/sh
    . /opt/venvs/pta/bin/activate
    exec "$@"
